<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>TokenPulse Agent</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/web3@1.10.0/dist/web3.min.js"></script>
  <style>
    :root {
      --light-bg: #ffffff;
      --light-text: #000000;
      --dark-bg: #121212;
      --dark-text: #ffffff;
    }
    body.light {
      background-color: var(--light-bg);
      color: var(--light-text);
    }
    body.dark {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }
    .token-card {
      border-radius: 1rem;
      box-shadow: 0 4px 10px rgba(0,0,0,0.15);
      padding: 1rem;
      margin-bottom: 1rem;
      background-color: inherit;
    }
    .token-img {
      width: 40px;
      height: 40px;
      margin-right: 10px;
    }
    .price-alert {
      margin-top: 1rem;
    }
  </style>
</head>
<body class="light">
  <div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>üß† TokenPulse Agent</h2>
      <div>
        <button id="connectWallet" class="btn btn-warning">üîå Connect Wallet</button>
        <button class="btn btn-dark" onclick="toggleMode()">üåó Toggle Mode</button>
      </div>
    </div><input type="text" id="search" class="form-control mb-3" placeholder="Search token..."/>
<div id="tokenList"></div>

<div class="price-alert">
  <h5>Set Price Alert</h5>
  <input type="text" id="alertToken" class="form-control" placeholder="Token ID (e.g. bitcoin)"/>
  <input type="number" id="alertPrice" class="form-control my-2" placeholder="Target Price (USD)"/>
  <button class="btn btn-outline-info" onclick="setAlert()">Set Alert</button>
  <div id="alerts"></div>
</div>

  </div>  <script>
    const tokenListEl = document.getElementById("tokenList");
    const searchEl = document.getElementById("search");
    const alertBox = document.getElementById("alerts");

    const coins = ["bitcoin","ethereum","solana","binancecoin","cardano","ripple","dogecoin","polkadot","chainlink"];
    const alerts = [];

    async function fetchCoins() {
      try {
        const res = await fetch("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids="+coins.join(",")+"&order=market_cap_desc&per_page=50&page=1&sparkline=false");
        const data = await res.json();
        displayTokens(data);
        checkAlerts(data);
      } catch (e) {
        tokenListEl.innerHTML = "<p class='text-danger'>Error loading data.</p>";
        console.error(e);
      }
    }

    function displayTokens(data) {
      const filter = searchEl.value.toLowerCase();
      tokenListEl.innerHTML = '';
      data.filter(t => t.name.toLowerCase().includes(filter) || t.symbol.toLowerCase().includes(filter))
        .forEach(token => {
          const card = document.createElement("div");
          card.className = "token-card d-flex align-items-center justify-content-between";
          card.innerHTML = `
            <div class="d-flex align-items-center">
              <img src="${token.image}" class="token-img" onerror="this.src='https://via.placeholder.com/40'"/>
              <div>
                <h5>${token.name} (${token.symbol.toUpperCase()})</h5>
                <p><strong>üí≤${token.current_price.toLocaleString()}</strong> <span class="${token.price_change_percentage_24h >= 0 ? 'text-success' : 'text-danger'}">${token.price_change_percentage_24h.toFixed(2)}%</span></p>
              </div>
            </div>
            <small class="text-muted">Powered by CoinGecko</small>
          `;
          tokenListEl.appendChild(card);
        });
    }

    function toggleMode() {
      document.body.classList.toggle("dark");
      document.body.classList.toggle("light");
    }

    function setAlert() {
      const token = document.getElementById("alertToken").value.toLowerCase();
      const price = parseFloat(document.getElementById("alertPrice").value);
      if (!token || isNaN(price)) return alert("Please enter valid token ID and price.");
      alerts.push({token, price});
      const msg = document.createElement("p");
      msg.textContent = `üì£ Alert set: ${token} at $${price}`;
      alertBox.appendChild(msg);
    }

    function checkAlerts(data) {
      alerts.forEach(alert => {
        const coin = data.find(c => c.id === alert.token);
        if (coin && coin.current_price >= alert.price) {
          alertBox.innerHTML += `<p class='text-success'>‚úÖ ${alert.token} hit target: $${coin.current_price}</p>`;
        }
      });
    }

    document.getElementById("connectWallet").onclick = async () => {
      if (typeof window.ethereum !== 'undefined') {
        try {
          const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
          alert(`üîó Wallet connected: ${accounts[0]}`);
        } catch (err) {
          alert('‚ùå Wallet connection failed');
        }
      } else {
        alert("Please install MetaMask");
      }
    };

    searchEl.addEventListener("input", fetchCoins);
    fetchCoins();
    setInterval(fetchCoins, 30000); // refresh every 30 seconds
  </script></body>
</html>